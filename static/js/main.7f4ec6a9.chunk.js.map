{"version":3,"sources":["helper/id.js","actions/index.js","components/AddTodoItem.js","helper/colors.js","components/TodoItem.js","helper/filterListItems.js","components/TodosList.js","components/FilterButton.js","components/Filters.js","App.js","serviceWorker.js","reducers/todos.js","reducers/filterReducer.js","reducers/messageReducer.js","reducers/rootReducer.js","index.js"],"names":["Id","Math","floor","random","updateMessage","type","AddTodoItem","useState","todo","setTodo","dispatch","useDispatch","onSubmit","event","text","preventDefault","id","name","autoComplete","placeholder","value","onChange","target","className","style","backgroundColor","onClick","TodoItem","toggleItem","deleteItem","complete","filteredList","filtertype","list","filter","item","TodosList","todos","useSelector","state","message","visiableItems","fliterListItem","length","todosList","map","key","FilterButton","current","currentFilterStyle","color","borderColor","Filters","currentFilter","filters","App","Boolean","window","location","hostname","match","action","filterReducer","messageReducer","allReducers","combineReducers","store","createStore","reducers","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.7f4ec6a9.chunk.js","sourcesContent":["const Id = () => (Math.floor(Math.random() * 10000));\r\nexport default Id;\r\n","import Id from '../helper/id';\r\n\r\nexport const filter = (filter) => ({\r\n    type: 'SET_FILTER',\r\n    filter\r\n})\r\n\r\nexport const updateMessage = (type) => ({\r\n    type\r\n})\r\n\r\nexport const add_todo = (text) => ({\r\n  type:'ADD_TODO',\r\n  id:Id(),\r\n  text\r\n})\r\n","import React,  { useState } from 'react'\r\nimport { useDispatch } from 'react-redux';\r\nimport { activeColor, deleteColor } from '../helper/colors';\r\nimport { add_todo } from '../actions';\r\n\r\n\r\nexport default function AddTodoItem() {\r\n\r\n  // input holder\r\n  const [todo, setTodo] = useState('');\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  // get todo text from user\r\n  const onChange = event => {\r\n      setTodo(event.target.value);\r\n  }\r\n\r\n  // Clear the input field\r\n  const cancel = () => setTodo('');\r\n\r\n  // submit the todo to ToDo List\r\n  const onSubmit = (event) => {\r\n    event.preventDefault();\r\n    // check the input & add a todo\r\n    todo && dispatch(add_todo(todo));\r\n    // clear the input field\r\n    setTodo('');\r\n  };\r\n\r\n  const massage = 'Add Task';\r\n\r\n  return(\r\n    <form onSubmit={onSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        name=\"todo\"\r\n        autoComplete='off'\r\n        placeholder={massage}\r\n        value={todo}\r\n        onChange={onChange}\r\n      />\r\n      <div className='buttons'>\r\n          <button\r\n            style={{ backgroundColor: activeColor }}\r\n            type=\"submit\" >\r\n            {massage}\r\n          </button>\r\n          <button\r\n            style={{ backgroundColor: deleteColor }}\r\n            onClick={cancel}\r\n          >cancel\r\n          </button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n","\r\nexport const mainColor = '#364f6b';\r\nexport const activeColor = '#43dde6';\r\nexport const deleteColor = '#fc5185';\r\nexport const bgColor = '#f0f0f0';\r\n","import React from 'react';\r\nimport { activeColor, deleteColor, bgColor} from '../helper/colors';\r\n\r\nexport default function TodoItem({text, toggleItem, deleteItem, complete }){\r\n  return(\r\n    <div\r\n      className='todoItem'\r\n      style={{ backgroundColor: complete ? activeColor : bgColor }}>\r\n\r\n      <li\r\n        className='text'\r\n        onClick={toggleItem}> \r\n        {text}\r\n      </li>\r\n\r\n      <div className='buttons'>\r\n        <button\r\n          className='item-button'\r\n          style={{ backgroundColor: complete ? bgColor : activeColor }}\r\n          onClick={toggleItem}>\r\n          {complete ? 'Undone' : 'Done'}\r\n        </button>\r\n\r\n        <button\r\n          className='item-button'\r\n          style={{ backgroundColor: deleteColor }}\r\n          onClick={deleteItem}>\r\n          Delete\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","const filteredList = (filtertype, list) => {\r\n    switch (filtertype) {\r\n        case 'SHOW_ALL_TODOS':\r\n            return list;\r\n        case 'SHOW_COMPLETED_TODOS':\r\n            return list.filter(item => item.complete);\r\n        case 'SHOW_ACTIVE_TODOS':\r\n            return list.filter(item => !item.complete);\r\n        default:\r\n            return list\r\n    }\r\n}\r\n\r\n\r\nexport default filteredList;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport TodoItem from './TodoItem';\r\nimport fliterListItem from '../helper/filterListItems';\r\nimport { updateMessage } from '../actions';\r\n\r\nexport default function TodosList(){\r\n\r\n  // Get states from the store\r\n  const todos = useSelector(state => state.todos);\r\n  const filter = useSelector(state => state.filter);\r\n  const message = useSelector(state => state.message);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  // Get filtered list\r\n  const visiableItems = fliterListItem(filter, todos);\r\n\r\n  // Update the message depending on the todo list state and filter\r\n  todos.length > 0\r\n    ? dispatch(updateMessage(`${filter}_MESSAGE`))\r\n    : dispatch(updateMessage('SHOW_ALL_TODOS_MESSAGE'))\r\n\r\n  const todosList = visiableItems.map(todo => (\r\n    <TodoItem\r\n      key={todo.id}\r\n      text={todo.text}\r\n      complete={todo.complete}\r\n      deleteItem={() => dispatch({ type: 'DELETE', id: todo.id })}\r\n      toggleItem={() => dispatch({ type: 'TOGGLE_TODO', id: todo.id })}\r\n    />\r\n  ));\r\n\r\n  return(\r\n    <div className=\"list-section\">\r\n      <ul className='todoList'>\r\n        {\r\n          visiableItems.length\r\n            ? todosList\r\n            :<h3 className=\"message\"> {message} </h3>\r\n        }\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { activeColor, mainColor } from '../helper/colors';\r\n\r\nexport default function FilterButton({type, onClick, current}){\r\n\r\n  const currentFilterStyle = {\r\n    color: mainColor,\r\n    backgroundColor : activeColor,\r\n    borderColor : activeColor\r\n  }\r\n\r\n  return(\r\n    <button\r\n      style={ current ?  currentFilterStyle : null}\r\n      onClick={onClick}>{type}\r\n    </button>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport FilterButton from './FilterButton';\r\nimport { filter } from '../actions';\r\n\r\nexport default function Filters() {\r\n\r\n  const currentFilter = useSelector(state => state.filter);\r\n  const dispatch = useDispatch();\r\n  const filterTypes = ['ALL', 'ACTIVE', 'COMPLETED'];\r\n\r\n  const filters = filterTypes.map(type =>\r\n    <FilterButton\r\n      key={type}\r\n      type={type}\r\n      current={`SHOW_${type}_TODOS` === currentFilter}\r\n      onClick={() => dispatch(filter(`SHOW_${type}_TODOS`))}\r\n    />\r\n  )\r\n\r\n  return(\r\n    <div className='filters'>\r\n      {filters}\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport AddTodoItem from './components/AddTodoItem'\r\nimport TodosList from './components/TodosList'\r\nimport Filters from './components/Filters'\r\nimport './styles/main.scss';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>To Do </h1>\r\n      <AddTodoItem />\r\n      <Filters />\r\n      <TodosList />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const todos = (state = [], action) => {\r\n  switch (action.type) {\r\n\r\n    case 'ADD_TODO':\r\n      return [\r\n        ...state,\r\n        {\r\n          id: action.id,\r\n          text: action.text,\r\n          complete: false\r\n        }\r\n      ]\r\n\r\n    case 'TOGGLE_TODO':\r\n      return (\r\n        state.map(\r\n          (todo) => todo.id === action.id\r\n            ? { ...todo, complete: !todo.complete }\r\n            : todo\r\n        )\r\n      )\r\n\r\n    case 'DELETE':\r\n      return (\r\n        state.filter(todo => todo.id !== action.id)\r\n    )\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default todos\r\n","const filterReducer = (state = 'SHOW_ALL_TODOS', action) => {\r\n    switch (action.type) {\r\n        case 'SHOW_ALL_TODOS':\r\n            return state\r\n        case 'SET_FILTER':\r\n            return action.filter\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default filterReducer;\r\n","const messageReducer = (state = \"you have no tasks\", action) => {\r\n\tswitch (action.type) {\r\n\t\tcase 'SHOW_ALL_TODOS_MESSAGE':\r\n\t\t\treturn state = \"you have no tasks\";\r\n\r\n\t\tcase 'SHOW_COMPLETED_TODOS_MESSAGE':\r\n\t\t\treturn state = \"You have tasks to do\";\r\n\r\n\t\tcase 'SHOW_ACTIVE_TODOS_MESSAGE':\r\n\t\t\treturn state = \"congratulations You have completed all tasks\";\r\n\t\t\t\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\n\r\nexport default messageReducer;\r\n","import todos from './todos';\r\nimport filterReducer from './filterReducer';\r\nimport messageReducer from './messageReducer'\r\nimport { combineReducers } from 'redux';\r\n\r\nconst allReducers = combineReducers({\r\n    todos,\r\n    filter: filterReducer,\r\n    message : messageReducer\r\n});\r\n\r\nexport default allReducers;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { createStore } from 'redux';\r\nimport reducers from './reducers/rootReducer';\r\nimport { Provider } from 'react-redux';\r\n\r\nconst store = createStore(reducers, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store} >\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}