{"version":3,"sources":["helper/id.js","actions/index.js","components/Speech.js","components/AddTodoItem.js","helper/colors.js","components/TodoItem.js","helper/filterListItems.js","components/TodosList.js","components/FilterButton.js","components/Filters.js","App.js","serviceWorker.js","reducers/todos.js","reducers/filterReducer.js","reducers/messageReducer.js","reducers/rootReducer.js","index.js"],"names":["Id","Math","floor","random","updateMessage","type","Speech","todo","massage","activeColor","listening","useSpeechRecognition","className","onClick","SpeechRecognition","startListening","AddTodoItem","useState","setTodo","transcript","dispatch","useDispatch","useEffect","browserSupportsSpeechRecognition","alert","onSubmit","event","text","preventDefault","id","name","autoComplete","placeholder","value","onChange","target","style","backgroundColor","TodoItem","toggleItem","deleteItem","complete","filteredList","filtertype","list","filter","item","TodosList","todos","useSelector","state","message","visiableItems","fliterListItem","length","todosList","map","key","FilterButton","current","currentFilterStyle","color","borderColor","Filters","currentFilter","filters","App","Boolean","window","location","hostname","match","initi","JSON","parse","localStorage","getItem","action","setItem","stringify","filterReducer","messageReducer","allReducers","combineReducers","store","createStore","reducers","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.30502f84.chunk.js","sourcesContent":["const Id = () => (Math.floor(Math.random() * 10000));\nexport default Id;\n","import Id from '../helper/id';\n\nexport const filter = (filter) => ({\n    type: 'SET_FILTER',\n    filter\n})\n\nexport const updateMessage = (type) => ({\n    type\n})\n\nexport const add_todo = (text) => ({\n  type:'ADD_TODO',\n  id:Id(),\n  text\n})\n","import React from 'react';\nimport {BsMicFill} from 'react-icons/bs';\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\n\n\nfunction Speech({todo, massage, activeColor}) {\n    const { listening } = useSpeechRecognition();\n    return (\n        <div className=\"speech\">\n            {\n                listening ?\n                  <div>\n                      <BsMicFill className=\"micOn\"/>\n                      <div className=\"pulse-ring\"></div>\n                  </div>\n                :\n                  <button onClick={SpeechRecognition.startListening}>\n                      <BsMicFill className=\"micOff\"/>\n                  </button>\n            }\n        </div>\n    )\n}\n\nexport default Speech\n","import React,  { useState, useEffect } from 'react'\nimport { useDispatch } from 'react-redux';\nimport { activeColor, deleteColor } from '../helper/colors';\nimport { add_todo } from '../actions';\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\nimport Speech from './Speech'\n\nexport default function AddTodoItem() {\n\n  // input holder\n  const [todo, setTodo] = useState('');\n\n  const { transcript } = useSpeechRecognition();\n\n  const dispatch = useDispatch();\n\n  // Print the speech into the input field\n  useEffect(() => {\n    if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n      alert(\"your browser is not supported!\");\n    }else{\n      setTodo(transcript);\n    }\n  }, [transcript]);\n\n  // get todo text from user\n  const onChange = event => {\n      setTodo(event.target.value);\n  }\n\n  // Clear the input field\n  const cancel = () => setTodo('');\n\n  // submit the todo to ToDo List\n  const onSubmit = (event) => {\n    event.preventDefault();\n    // check the input & add a todo\n    todo && dispatch(add_todo(todo));\n    // clear the input field\n    setTodo('');\n  };\n\n  const massage = 'Add Task';\n\n  return(\n    <form onSubmit={onSubmit}>\n      <>\n      <input\n        type=\"text\"\n        name=\"todo\"\n        autoComplete='off'\n        placeholder={massage}\n        value={todo}\n        onChange={onChange}\n      />\n      <div className={todo ? 'showButtons' : 'hideButtons'}>\n          <button\n            style={{ backgroundColor: activeColor }}\n            type=\"submit\" >\n            {massage}\n          </button>\n          <button\n            style={{ backgroundColor: deleteColor }}\n            onClick={cancel}\n          >cancel\n          </button>\n      </div>\n      </>\n      <Speech todo={todo} massage={massage} activeColor={activeColor}/>\n    </form>\n  )\n}\n","\nexport const mainColor = '#364f6b';\nexport const activeColor = '#43dde6';\nexport const deleteColor = '#fc5185';\nexport const bgColor = '#f0f0f0';\n","import React from 'react';\nimport { activeColor, deleteColor, bgColor} from '../helper/colors';\n\nexport default function TodoItem({text, toggleItem, deleteItem, complete }){\n  return(\n    <div\n      className='todoItem'\n      style={{ backgroundColor: complete ? activeColor : bgColor }}>\n\n      <li\n        className='text'\n        onClick={toggleItem}> \n        {text}\n      </li>\n\n      <div className='buttons'>\n        <button\n          className='item-button'\n          style={{ backgroundColor: complete ? bgColor : activeColor }}\n          onClick={toggleItem}>\n          {complete ? 'Undone' : 'Done'}\n        </button>\n\n        <button\n          className='item-button'\n          style={{ backgroundColor: deleteColor }}\n          onClick={deleteItem}>\n          Delete\n        </button>\n      </div>\n    </div>\n  )\n}\n","const filteredList = (filtertype, list) => {\n    switch (filtertype) {\n        case 'SHOW_ALL_TODOS':\n            return list;\n        case 'SHOW_COMPLETED_TODOS':\n            return list.filter(item => item.complete);\n        case 'SHOW_ACTIVE_TODOS':\n            return list.filter(item => !item.complete);\n        default:\n            return list\n    }\n}\n\n\nexport default filteredList;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport TodoItem from './TodoItem';\nimport fliterListItem from '../helper/filterListItems';\nimport { updateMessage } from '../actions';\n\nexport default function TodosList(){\n\n  // Get states from the store\n  const todos = useSelector(state => state.todos);\n  const filter = useSelector(state => state.filter);\n  const message = useSelector(state => state.message);\n\n  const dispatch = useDispatch();\n\n  // Get filtered list\n  const visiableItems = fliterListItem(filter, todos);\n\n  // Update the message depending on the todo list state and filter\n  todos.length > 0\n    ? dispatch(updateMessage(`${filter}_MESSAGE`))\n    : dispatch(updateMessage('SHOW_ALL_TODOS_MESSAGE'))\n\n  const todosList = visiableItems.map(todo => (\n    <TodoItem\n      key={todo.id}\n      text={todo.text}\n      complete={todo.complete}\n      deleteItem={() => dispatch({ type: 'DELETE', id: todo.id })}\n      toggleItem={() => dispatch({ type: 'TOGGLE_TODO', id: todo.id })}\n    />\n  ));\n\n  return(\n    <div className=\"list-section\">\n      <ul className='todoList'>\n        {\n          visiableItems.length\n            ? todosList\n            :<h3 className=\"message\"> {message} </h3>\n        }\n      </ul>\n    </div>\n  )\n}\n","import React from 'react';\nimport { activeColor, mainColor } from '../helper/colors';\n\nexport default function FilterButton({type, onClick, current}){\n\n  const currentFilterStyle = {\n    color: mainColor,\n    backgroundColor : activeColor,\n    borderColor : activeColor\n  }\n\n  return(\n    <button\n      style={ current ?  currentFilterStyle : null}\n      onClick={onClick}>{type}\n    </button>\n  )\n}\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport FilterButton from './FilterButton';\nimport { filter } from '../actions';\n\nexport default function Filters() {\n\n  const currentFilter = useSelector(state => state.filter);\n  const dispatch = useDispatch();\n  const filterTypes = ['ALL', 'ACTIVE', 'COMPLETED'];\n\n  const filters = filterTypes.map(type =>\n    <FilterButton\n      key={type}\n      type={type}\n      current={`SHOW_${type}_TODOS` === currentFilter}\n      onClick={() => dispatch(filter(`SHOW_${type}_TODOS`))}\n    />\n  )\n\n  return(\n    <div className='filters'>\n      {filters}\n    </div>\n  )\n}\n","import React from 'react';\nimport AddTodoItem from './components/AddTodoItem'\nimport TodosList from './components/TodosList'\nimport Filters from './components/Filters'\nimport './styles/main.scss';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>To Do </h1>\n      <AddTodoItem />\n      <Filters />\n      <TodosList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","let initi = JSON.parse(localStorage.getItem('Todos')) || [];\nconst todos = (state = initi, action) => {\n  switch (action.type) {\n\n    case 'ADD_TODO':\n      state =[\n        ...state,\n        {\n          id: action.id,\n          text: action.text,\n          complete: false\n        }\n      ]\n      localStorage.setItem('Todos', JSON.stringify(state));\n      return state\n      \n    case 'TOGGLE_TODO':\n      state = state.map(\n        (todo) => todo.id === action.id\n          ? { ...todo, complete: !todo.complete }\n          : todo\n      )\n      localStorage.setItem('Todos', JSON.stringify(state));\n      return state\n\n    case 'DELETE':\n      state = state.filter(todo => todo.id !== action.id)\n      localStorage.setItem('Todos', JSON.stringify(state));\n      return state\n\n    default:\n      return state\n  }\n}\n\nexport default todos\n","const filterReducer = (state = 'SHOW_ALL_TODOS', action) => {\n    switch (action.type) {\n        case 'SHOW_ALL_TODOS':\n            return state\n        case 'SET_FILTER':\n            return action.filter\n        default:\n            return state\n    }\n}\n\nexport default filterReducer;\n","const messageReducer = (state = \"you have no tasks\", action) => {\n\tswitch (action.type) {\n\t\tcase 'SHOW_ALL_TODOS_MESSAGE':\n\t\t\treturn state = \"you have no tasks\";\n\n\t\tcase 'SHOW_COMPLETED_TODOS_MESSAGE':\n\t\t\treturn state = \"You have tasks to do\";\n\n\t\tcase 'SHOW_ACTIVE_TODOS_MESSAGE':\n\t\t\treturn state = \"congratulations You have completed all tasks\";\n\t\t\t\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\n\nexport default messageReducer;\n","import todos from './todos';\nimport filterReducer from './filterReducer';\nimport messageReducer from './messageReducer'\nimport { combineReducers } from 'redux';\n\nconst allReducers = combineReducers({\n    todos,\n    filter: filterReducer,\n    message : messageReducer\n});\n\nexport default allReducers;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore } from 'redux';\nimport reducers from './reducers/rootReducer';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(reducers, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} >\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}